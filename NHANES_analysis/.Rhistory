est1[dd] <- est_b[1]
est[dd] <- mean(est_b)
est_v[dd] <- sum(est_b/(se_b^2))/(sum(1/(se_b^2)))
boot_se[dd] <- sd(est_b)
boot_se_corr[dd] <- sd(est_b)/sqrt(B-1)
modelbased_se[dd] <- sqrt(sum(se_b^2)/(B-1)^2)
if(dd%%100==0)  print(dd)
}
#est1
round(median(boot_se)/sd(est1),2)
#est
round(median(boot_se_corr)/sd(est),2)
round(median(modelbased_se)/sd(est),2)
# round(median(testunique)/(B*n),2)
boxplot(boot_se_corr,modelbased_se,ylim=c(0,0.2));abline(h=sd(est),col="red",lwd=2)
sd(full_est)
sd(est)
sd(est_v)
5000/6000
5000/60000
650*4
6235*4
625*4
sd
length(y)
wA <- c(0.50, 0.25, 0.10, 0.05, 0.05, 0.02, 0.02, 0.01)
wB <- c(0.10, 0.25, 0.50, 0.05, 0.05, 0.02, 0.02, 0.01) ## swapped w1 and w3
wC <- c(0.50, -0.25, 0.10, 0.05, 0.05, 0.02, 0.02, 0.01) ## set w2 to be negative
## make true weight function
if(dat_version=="POS"){
ww <- wA
}else if(dat_version=="POSwrong"){
ww <- wB
}else if(dat_version=="NEG"){
ww <- wC
}# else if(dat_version=="ZERO"){
#   ww <- c(4:1,0,0,0,0)
# }
wwnorm <- ww/sqrt(sum(ww^2))
if(low_corr==TRUE){ ## in low-correlation setting, use index 3 (median pairwise correlation of 0.46)
w1 <- c(rep(0,8),rep(0,2),ww); w1 <- w1/sqrt(sum(w1^2))
}else{ ## otherwise use index 1 (median pairwise correlation of 0.86)
w1 <- c(ww,rep(0,2),rep(0,8)); w1 <- w1/sqrt(sum(w1^2))
}
# ## old
# wx1 <- scale(X%*%w1);mn1 <- mean(X%*%w1);sd1 <- sd(X%*%w1);med1 <- c(apply(X,2,median)%*%w1-mn1)/sd1
#
# ## exposure response functions
# hfun <- function(z) 5*dnorm(z) #1.5/(1+exp(-15*z)) -0.25*z #1.5/(1+exp(-15*z))
#
# h <- hfun(wx1)
# exposure reponse
mn1 <- mean(X%*%w1);sd1 <- sd(X%*%w1)
## exposure response functions
## exposure response functions
hfun1 <- function(z){ # the 1-dimensional single index function
5*dnorm((z-mn1)/sd1)
}
hfun <- function(x){ ## function which takes vector and turns it into h
hfun1(x%*%w1)
}
# old:
# hfun <- function(z){
#   5*dnorm((z%*%w1-mn1)/sd1)
# }
h <- hfun(X)
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
length(y)
sd
a <- rbinom(100,1,0.5)
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c))  +b*(4*c)
}
plot(hfun(a,X[,1])[a==0])
plot(hfun(a,X[[1]][,1])[a==0])
plot(hfun(a,X[[1]][,1])[a==1])
plot(hfun(a,X[[1]][,1])[a==1]~X[[1]][,1][a==1])
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
h <- hfun(a,X[[1]][,1])
dim(X[[1]])
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
####################
dim(X[[1]])
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.25,0.75),points=11)
plot_univar_hnew2(pred_component)
mean(X[[1]][,1])
sd(X[[1]][,1])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c/5))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==1]~X[[1]][,1][a==1])
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c/10))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c/0.1))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c/0.5))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c/0.75))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(hfun1(c/0.25))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
h <- hfun(a,X[[1]][,1])
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
####################
dim(X[[1]])
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.25,0.75),points=11)
plot_univar_hnew2(pred_component)
plot(sin(X[[1]][,1])~X[[1]][,1])
plot(sin(X[[1]][,1]/4)~X[[1]][,1])
plot(sin(X[[1]][,1]*4)~X[[1]][,1])
plot(4*sin(X[[1]][,1]*4)~X[[1]][,1])
plot(4*sin(X[[1]][,1]*2)~X[[1]][,1])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(4*sin(c*2))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
plot(hfun(a,X[[1]][,1])[a==1]~X[[1]][,1][a==1])
h <- hfun(X)
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21)
plot_univar_hnew2(pred_component)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtl=0)
plot_univar_hnew2(pred_component)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtl=1)
plot_univar_hnew2(pred_component)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtl=list(1,1))
plot_univar_hnew2(pred_component)
pred_component <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtl=list(0,0))
plot_univar_hnew2(pred_component)
plot(4*sin(X[[1]][,1]*4)~X[[1]][,1])
plot(4*sin(X[[1]][,1]*7)~X[[1]][,1])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(7*sin(c*2))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
plot(hfun(a,X[[1]][,1])[a==1]~X[[1]][,1][a==1])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(4*sin(c*4))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
hfun <- function(b,c){ ## function which takes vector and turns it into h
(1-b)*(4*sin(c*6))  +b*(4*c)
}
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
h <- hfun(X)
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component1 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(1,1))
pred_component0 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(0,0))
plot_univar_hnew2(pred_component0)[[2]]
plot_univar_hnew2(pred_component1)[[2]]
plot(h[a==0]~X[[1]][a==0,1],type="l")
plot(h[a==0]~(X[[1]][,1])[a==0],type="l")
plot(h~(X[[1]][,1]),type="l")
h <- hfun(a,X[[1]][,1])
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component1 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(1,1))
pred_component0 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(0,0))
plot_univar_hnew2(pred_component0)[[2]]
plot_univar_hnew2(pred_component1)[[2]]
plot(h[a==0]~X[[1]][a==0,1],type="l")
plot(h[a==0]~(X[[1]][,1])[a==0],type="l")
plot(h[a==1]~(X[[1]][,1])[a==1],type="l")
plot(h[a==0]~(X[[1]][,1])[a==0],type="l")
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
plot(hfun(a,X[[1]][,1])[a==1]~X[[1]][,1][a==1])
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0])
plot(hfun(a,X[[1]][,1])[a==0]~X[[1]][,1][a==0],type="l")
plot((hfun(a,X[[1]][,1])[a==0])[order(hfun(a,X[[1]][,1])[a==0])]~(X[[1]][,1][a==0])[order(hfun(a,X[[1]][,1])[a==0])],type="l")
plot((hfun(a,X[[1]][,1])[a==0])[sort(hfun(a,X[[1]][,1])[a==0])]~(X[[1]][,1][a==0])[sort(hfun(a,X[[1]][,1])[a==0])],type="l")
plot((hfun(a,X[[1]][,1])[a==0])[orderX[[1]][,1][a==0])]~(X[[1]][,1][a==0])[orderX[[1]][,1][a==0])],type="l")
plot((hfun(a,X[[1]][,1])[a==0])[order(X[[1]][,1][a==0])]~(X[[1]][,1][a==0])[order(X[[1]][,1][a==0])],type="l")
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R*2,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component1 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(1,1))
pred_component0 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(0,0))
plot_univar_hnew2(pred_component0)[[2]]
plot_univar_hnew2(pred_component1)[[2]]
plot((h[a==0])[order(X[[1]][a==0,1])]~(X[[1]][a==0,1])[order(X[[1]][a==0,1])],type="l")
plot((h[a==1])[order(X[[1]][a==1,1])]~(X[[1]][a==1,1])[order(X[[1]][a==1,1])],type="l")
plot((h[a==0])[order(X[[1]][a==0,1])]~(X[[1]][a==0,1])[order(X[[1]][a==0,1])],type="l")
lines(pred_component0$fits$mean~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),lenght=21),col="blue")
lines(pred_component0$fits$mean~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
length(pred_component0$fits$mean)
lines(pred_component0$fits$mean[1:21]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
lines(pred_component0$fits$mean[1:21]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
lines(pred_component0$fits$mean[22:42]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
plot((h[a==0])[order(X[[1]][a==0,1])]~(X[[1]][a==0,1])[order(X[[1]][a==0,1])],type="l")
lines(pred_component0$fits$mean[22:42]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
lines(pred_component0$fits$mean[22:42]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue",lty="dotted")
plot((h[a==0])[order(X[[1]][a==0,1])]~(X[[1]][a==0,1])[order(X[[1]][a==0,1])],type="l")
lines(pred_component0$fits$mean[22:42]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue",lty="dotted")
plot((h[a==0])[order(X[[1]][a==0,1])]~(X[[1]][a==0,1])[order(X[[1]][a==0,1])],type="l")
points(pred_component0$fits$mean[22:42]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
plot((h[a==1])[order(X[[1]][a==1,1])]~(X[[1]][a==1,1])[order(X[[1]][a==1,1])],type="l")
points(pred_component1$fits$mean[1:21]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
points(pred_component1$centered$mean[1:21]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="red")
points(pred_component1$fits$mean[1:21]~pred_component1$fits$grid[1:21,],col="red")
pred_component1$fits$grid
pred_component1$grid
points(pred_component1$fits$mean[1:21]~pred_component1$grid[[2]][1:21,],col="red")
points(pred_component1$fits$mean[22:42]~pred_component1$grid[[2]][22:42,],col="red")
a <- rbinom(100,1,0.5)
h <- hfun(a,X[[1]][,1])
h_TRAIN <- h[resample_ids]
h_TEST <- h[-resample_ids]
## covariate effects
gamma <- c(-0.43,0.00,-0.25,0.12,0.08)#,-0.06,0.23,-0.12,-0.02,0.02,0.08,-0.07,0.01,0.02,-0.04,-0.18,-0.28,-0.15)
## generate outcomes for entire dataset
yfull <- h + covariates%*%gamma + rnorm(nrow(nhanes),0,1)*sd
y <- dat$y <- yfull[resample_ids]
y_TEST <- dat$y_TEST <- yfull[-resample_ids]
#############################
###     true values       ###
#############################
## note that for overall effect contrasts, we look at an evenly spaced grid of quantiles, i.e. 25th, 30th, 35th percentiles....
## for component/index curves we take an evenly spaced grid of exposure values x between 25th and 75th percentiles (this is distinct from the overall contrast grid)
### true overall association (Note: these are contrasts)
overall_true <- hfun(apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))) #overall_true <- hfun((apply(dat$SIM$X[[1]],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w1-mn1)/sd1)
overall_true <- overall_true-overall_true[6] ## subtract median
### true index curves
index_vals <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%wwnorm ##
grid_index <- seq(quantile(index_vals,0.25),quantile(index_vals,0.75),length=11)
index_true <- hfun1(grid_index)
### true component curves
Xmedian <- apply(dat$SIM$X[[1]],2,function(x) quantile(x,0.5))
Xgrid <- matrix(Xmedian,nrow=11*8,ncol=length(Xmedian),byrow=TRUE) ## 11 points between 0.25 and 0.75, 8 exposures in our index
for (ii in 1:8){
Xgrid[((ii-1)*11+1):(ii*11),(low_corr*10)+ii] <- seq(quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.25),quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],0.75),length=11) # old version was grid of quantiles, but now we've changed it to match what predict_hnew2() does by default #quantile(dat$SIM$X[[1]][,(low_corr*10)+ii],seq(0.25,0.75,length=11))
}
component_true <- hfun(Xgrid) #component_true <- hfun((Xgrid%*%w1-mn1)/sd1)
##################################
###     data for fitting       ###
##################################
# consider only 8 exposures
w_prior <- wA
w_prior <- wA/sum(wA) # as proportions
# get data for TEQ model
XTEQ <- dat$SIM$X[[1]][,10*low_corr+1:8]%*%w_prior             ## for fitting
XTEQ_TEST <- dat$SIM$X_TEST[[1]][,10*low_corr+1:8]%*%w_prior   ## for predicting new h
XTEQ_component <- Xgrid[,10*low_corr+1:8]%*%w_prior
XTEQ_overall <- apply(dat$SIM$X[[1]][,10*low_corr+1:8],2,function(x) quantile(x,seq(0.25,0.75,by=0.05)))%*%w_prior
XTEQ_overall <- rbind(XTEQ_overall,XTEQ_overall[6]) ## final row is the median for comparisons
fit <- bsmim2(y=y,x=list(a,X[[1]][,1]),z=dat$covariates,niter=R*2,nburn=R*burn,nthin=thin,centering=F,scaling=F,prior_sigma=c(0.001,0.001),prior_lambda_shaperate=c(1,0.1),gaussian=TRUE,spike_slab=TRUE,gauss_prior=TRUE,prior_theta_slab_sd=0.25,stepsize_theta=jump,draw_h=FALSE)
pred_component1 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(1,1))
pred_component0 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=21,qtls=list(0,0))
plot_univar_hnew2(pred_component0)[[2]]
plot_univar_hnew2(pred_component1)[[2]]
plot((h[a==0])[order(X[[1]][a==0,1])]~(X[[1]][a==0,1])[order(X[[1]][a==0,1])],type="l")
points(pred_component0$fits$mean[22:42]~seq(quantile(X[[1]][,1],0.05),quantile(X[[1]][,1],0.95),length=21),col="blue")
plot((h[a==1])[order(X[[1]][a==1,1])]~(X[[1]][a==1,1])[order(X[[1]][a==1,1])],type="l")
points(pred_component1$fits$mean[22:42]~pred_component1$grid[[2]][22:42,],col="red")
max(X[[1]][a==1,1])
max(X[[1]][a==0,1])
quantile(X[[1]][a==0,1],0.95)
quantile(X[[1]][a==1,1],0.95)
pred_component1 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=81,qtls=list(1,1))
pred_component0 <- predict_hnew2(fit,qtl_lims=c(0.05,0.95),points=81,qtls=list(0,0))
plot_univar_hnew2(pred_component0)[[2]]
plot_univar_hnew2(pred_component1)[[2]]
plot_univar_hnew2(pred_component1,centered = T)[[2]]
plot_univar_hnew2(pred_component1,centered = F)[[2]]
plot_univar_hnew2(pred_component0,centered=T)[[2]]
plot_univar_hnew2(pred_component0,centered=F)[[2]]
pred_component0 <- predict_hnew2(fit,qtl_lims=c(0.05,0.9),points=81,qtls=list(0,0))
pred_component1 <- predict_hnew2(fit,qtl_lims=c(0.05,0.9),points=81,qtls=list(1,1))
plot_univar_hnew2(pred_component0)[[2]]
plot_univar_hnew2(pred_component1)[[2]]
plot_univar_hnew2(pred_component0,centered=F)[[2]]
plot_univar_hnew2(pred_component1,centered=F)[[2]]
